- name: Deploy Django Application Stack
  hosts: app_servers
  become: yes
  vars:
    app_name: django_app
    app_user: django
    app_group: django
    django_port: 8000
    db_name: django_db
    db_user: django_user
    db_password: "{{ vault_db_password }}"
    python_version: python3.10
    venv_path: "/opt/{{ app_name }}/venv"
    app_path: "/opt/{{ app_name }}"
    nginx_config_path: "/etc/nginx/sites-available"

  tasks:
    - name: Add deadsnakes PPA for Python
      apt_repository:
        repo: ppa:deadsnakes/ppa
        state: present

    - name: Install system dependencies
      apt:
        name:
          - "{{ python_version }}"
          - "{{ python_version }}-venv"
          - postgresql
          - postgresql-contrib
          - nginx
          - git
          - python3-psycopg2
        state: present
        update_cache: yes

    - name: Create application group
      group:
        name: "{{ app_group }}"
        system: yes

    - name: Create application user
      user:
        name: "{{ app_user }}"
        group: "{{ app_group }}"
        system: yes
        createhome: yes
        home: "{{ app_path }}"
        shell: /bin/bash

    - name: Create virtual environment
      command:
        cmd: "{{ python_version }} -m venv {{ venv_path }}"
        creates: "{{ venv_path }}"

    - name: Install Python dependencies
      pip:
        name:
          - django
          - djangorestframework
          - psycopg2-binary
          - gunicorn
        executable: "{{ venv_path }}/bin/pip"
        state: present

    - name: Create Django project
      command:
        cmd: "{{ venv_path }}/bin/django-admin startproject {{ app_name }} {{ app_path }}"
        creates: "{{ app_path }}/manage.py"

    - name: Create my_healthcheck app
      command:
        cmd: "{{ venv_path }}/bin/python manage.py startapp my_healthcheck"
        chdir: "{{ app_path }}"
        creates: "{{ app_path }}/my_healthcheck"

    - name: Copy my_healthcheck views.py
      copy:
        src: files/my_healthcheck/views.py
        dest: "{{ app_path }}/my_healthcheck/views.py"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0644'

    - name: Copy my_healthcheck urls.py
      copy:
        src: files/my_healthcheck/urls.py
        dest: "{{ app_path }}/my_healthcheck/urls.py"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0644'

    - name: Create my_healthcheck __init__.py
      copy:
        content: ""
        dest: "{{ app_path }}/my_healthcheck/__init__.py"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0644'

    - name: Update project URLs
      blockinfile:
        path: "{{ app_path }}/{{ app_name }}/urls.py"
        block: |
          from django.urls import path, include

          urlpatterns = [
              path('', include('my_healthcheck.urls')),
          ]
        marker: "# {mark} ANSIBLE MANAGED BLOCK"
        create: yes

    - name: Update INSTALLED_APPS in settings.py
      lineinfile:
        path: "{{ app_path }}/{{ app_name }}/settings.py"
        line: "    'my_healthcheck',"
        insertafter: "^INSTALLED_APPS = \\["
        state: present

    - name: Get server IP address
      command: hostname -I
      register: server_ip

    - name: Update ALLOWED_HOSTS in settings.py
      blockinfile:
        path: "{{ app_path }}/{{ app_name }}/settings.py"
        block: |
          ALLOWED_HOSTS = ['{{ server_ip.stdout.split()[0] }}', 'localhost']
        marker: "# {mark} ANSIBLE MANAGED BLOCK"
        create: yes

    - name: Find pg_hba.conf location
      find:
        paths: /etc/postgresql
        patterns: pg_hba.conf
        recurse: yes
      register: pg_hba_file

    - name: Configure PostgreSQL authentication
      lineinfile:
        path: "{{ pg_hba_file.files[0].path }}"
        regexp: '^local\s+all\s+postgres\s+peer$'
        line: 'local   all             postgres                                trust'
        backup: yes
      become: yes
      notify: restart postgresql
      when: pg_hba_file.matched > 0

    - name: Restart PostgreSQL for authentication changes
      service:
        name: postgresql
        state: restarted
      become: yes

    - name: Create database user
      postgresql_user:
        name: "{{ db_user }}"
        password: "{{ db_password }}"
        state: present
      become: yes
      become_user: postgres

    - name: Configure PostgreSQL
      postgresql_db:
        name: "{{ db_name }}"
        owner: "{{ db_user }}"
        state: present
      become: yes
      become_user: postgres

    - name: Grant privileges to user
      postgresql_user:
        name: "{{ db_user }}"
        db: "{{ db_name }}"
        priv: ALL
        state: present
      become: yes
      become_user: postgres

    - name: Configure nginx
      template:
        src: templates/nginx.conf.j2
        dest: "{{ nginx_config_path }}/{{ app_name }}"
      notify: restart nginx


    - name: Update Nginx server_name with server IP
      blockinfile:
        path: "{{ nginx_config_path }}/{{ app_name }}"
        block: |
          server {
              listen 80;
              server_name {{ server_ip.stdout.split()[0] }};

              location / {
                  proxy_pass http://127.0.0.1:{{ django_port }};
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              }
          }
        marker: "# {mark} ANSIBLE MANAGED BLOCK"
        create: yes



    - name: Enable nginx site
      file:
        src: "{{ nginx_config_path }}/{{ app_name }}"
        dest: "/etc/nginx/sites-enabled/{{ app_name }}"
        state: link
      notify: restart nginx

    - name: Create systemd service
      template:
        src: templates/gunicorn.service.j2
        dest: "/etc/systemd/system/{{ app_name }}.service"
      notify: restart gunicorn

  handlers:
    - name: restart nginx
      service:
        name: nginx
        state: restarted

    - name: restart postgresql
      service:
        name: postgresql
        state: restarted

    - name: restart gunicorn
      systemd:
        name: "{{ app_name }}"
        state: restarted
        daemon_reload: yes
